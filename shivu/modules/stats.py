from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler
from shivu import collection, application, user_collection

async def show_database(update: Update, context: CallbackContext) -> None:
    # Bot owner ID(s)
    DEV_LIST = [6402009857]

    # Check if the user executing the command is authorized
    if update.effective_user.id not in DEV_LIST:
        await update.message.reply_text("üö´ You are not authorized to use this feature.")
        return

    try:
        # Fetch counts from the database
        total_characters = await collection.count_documents({})
        total_users = await user_collection.count_documents({"type": "user"})
        total_chats = await user_collection.count_documents({"type": "chat"})
        total_waifus = await collection.count_documents({"is_waifu": True})
        total_animes = len(await collection.distinct("anime"))
        total_harems = await user_collection.count_documents({"has_harem": True})

        # Count characters by rarity
        rarities = [
            "‚ö™Ô∏è Common", "üîµ Medium", "üë∂ Chibi", "üü† Rare", 
            "üü° Legendary", "üíÆ Exclusive", "ü´ß Premium", 
            "üîÆ Limited Edition", "üå∏ Exotic", "üéê Astral", "üíû Valentine"
        ]
        rarity_counts = {rarity: await collection.count_documents({"rarity": rarity}) for rarity in rarities}

        # Construct the message with a stylish format
        message = (
            "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
            "        üåü **Bot Database Summary** üåü\n"
            "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n"
            f"‚óà **üë§ Total Characters**: `{total_characters}`\n"
            f"‚óà **üë• Total Users**: `{total_users}`\n"
            f"‚óà **üçú Total Chats**: `{total_chats}`\n"
            f"‚óà **üçÅ Total Waifus**: `{total_waifus}`\n"
            f"‚óà **üçÉ Total Harems**: `{total_harems}`\n"
            f"‚óà **‚õ©Ô∏è Total Animes**: `{total_animes}`\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "‚ùÑÔ∏è **Character Counts by Rarity:**\n"
        )
        for rarity, count in rarity_counts.items():
            message += f"   ‚îú‚îÄ‚û§ {rarity}: `{count}`\n"
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

        # Inline keyboard for "Close" button
        keyboard = [[InlineKeyboardButton("‚ùå Close", callback_data="close_message")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send the constructed message with the inline keyboard
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")
    except Exception as e:
        # Handle unexpected errors
        await update.message.reply_text(f"‚ö†Ô∏è An error occurred:\n`{e}`", parse_mode="Markdown")

# Callback to handle the "Close" button
async def close_message_callback(update: Update, context: CallbackContext) -> None:
    # Remove the message when the "Close" button is clicked
    try:
        await update.callback_query.message.delete()
    except Exception as e:
        await update.callback_query.answer(f"‚ö†Ô∏è Unable to delete the message: {e}", show_alert=True)

# Add the command handler to the application
application.add_handler(CommandHandler("stats", show_database, block=False))
application.add_handler(CallbackQueryHandler(close_message_callback, pattern="^close_message$"))
